name: Deploy to Server
on:
  push:
    branches:
      - main  # Deploy on push to main
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          
      - name: Build Frontend
        run: |
          cd front-end
          npm install
          npm run build
          
      - name: Debug directory structure
        run: |
          ls -la
          ls -la front-end/ || echo "front-end directory not found"
          ls -la front-end/dist/ || echo "dist directory not found"
      
      # Use the official GitHub Action for SSH
      - name: Install SSH Key
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      
      # Skip known_hosts check for troubleshooting
      - name: Deploy to Server
        run: |
          # Try connecting with verbose output and StrictHostKeyChecking disabled
          ssh -v -o StrictHostKeyChecking=no -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
          # Navigate to project directory
          cd /deploy/platonus-api-tracing-project
          
          # Build frontend locally on the server
          cd front-end
          npm install
          npm run build
          
          # Now copy the locally built frontend to the deployment location
          echo "${{ secrets.SSH_PASSWORD }}" | sudo -S rm -rf /app/main-ui/*  # Remove old files
          echo "${{ secrets.SSH_PASSWORD }}" | sudo -S cp -r dist/* /app/main-ui/
          echo "${{ secrets.SSH_PASSWORD }}" | sudo -S chmod -R 755 /app/main-ui/
          
          # Go back to project root
          cd ..
          
          # Git operations
          echo "${{ secrets.SSH_PASSWORD }}" | sudo -S git fetch origin
          echo "${{ secrets.SSH_PASSWORD }}" | sudo -S git reset --hard origin/main
          
          export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
          
          # Set execute permissions for Gradle wrappers
          echo "${{ secrets.SSH_PASSWORD }}" | sudo -S chmod +x ./auth-api/gradlew
          echo "${{ secrets.SSH_PASSWORD }}" | sudo -S chmod +x ./docs-api/gradlew
          echo "${{ secrets.SSH_PASSWORD }}" | sudo -S chmod +x ./api-gateway/gradlew
          
          # Build and deploy Auth API
          echo "${{ secrets.SSH_PASSWORD }}" | sudo -S ./auth-api/gradlew -p ./auth-api clean build -x test
          echo "${{ secrets.SSH_PASSWORD }}" | sudo -S cp ./auth-api/build/libs/auth-api-0.0.1-SNAPSHOT.jar /app/auth-api/auth-api-0.0.1-SNAPSHOT.jar
          echo "${{ secrets.SSH_PASSWORD }}" | sudo -S chmod 777 /app/auth-api/auth-api-0.0.1-SNAPSHOT.jar
          
          # Build and deploy Docs API
          echo "${{ secrets.SSH_PASSWORD }}" | sudo -S ./docs-api/gradlew -p ./docs-api clean build -x test
          echo "${{ secrets.SSH_PASSWORD }}" | sudo -S cp ./docs-api/build/libs/docs-api-0.0.1-SNAPSHOT.jar /app/docs-api/docs-api-0.0.1-SNAPSHOT.jar
          echo "${{ secrets.SSH_PASSWORD }}" | sudo -S chmod 777 /app/docs-api/docs-api-0.0.1-SNAPSHOT.jar
          
          # Build and deploy API Gateway
          echo "${{ secrets.SSH_PASSWORD }}" | sudo -S ./api-gateway/gradlew -p ./api-gateway clean build -x test
          echo "${{ secrets.SSH_PASSWORD }}" | sudo -S cp ./api-gateway/build/libs/api-gateway-0.0.1-SNAPSHOT.jar /app/api-gateway/api-gateway-0.0.1-SNAPSHOT.jar
          echo "${{ secrets.SSH_PASSWORD }}" | sudo -S chmod 777 /app/api-gateway/api-gateway-0.0.1-SNAPSHOT.jar
          
          # Restart services
          echo "${{ secrets.SSH_PASSWORD }}" | sudo -S supervisorctl reread
          echo "${{ secrets.SSH_PASSWORD }}" | sudo -S supervisorctl update
          echo "${{ secrets.SSH_PASSWORD }}" | sudo -S supervisorctl restart all
          EOF
